name: staging deploy workflow

on:
  pull_request:
    branches:
      -
    types:
      - closed

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn clean install -DskipTests -Ptest

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run Maven tests
        run: mvn -B verify -Ptest

      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: report-upload
          path: target/

  sonnar:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: write
      pull-requests: write
      checks: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download report
        uses: actions/download-artifact@v4
        with:
          name: report-upload
          path: target/

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ vars.DOCKER_PASSWORD }}

      - name: Pull sonarsource/sonar-scanner-cli image
        run: docker pull "sonarsource/sonar-scanner-cli:latest"

      - name: Analysing with sonarsource
        run: docker run -e SONAR_TOKEN=${{ secrets.SONAR_TOKEN }} -e SONAR_BRANCH_NAME="staging" -v "${PWD}:/usr/src" sonarsource/sonar-scanner-cli

  docker:
    runs-on: ubuntu-latest
    needs: test
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ vars.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build \
            --build-arg SPRING_PROFILES_ACTIVE="${{ vars.SPRING_PROFILES_ACTIVE }}" \
            --build-arg PORT="${{ vars.PORT }}" \
            --build-arg APP_VERSION="${{ github.sha }}" \
            --build-arg APP_SERVER_URL="${{ vars.APP_SERVER_URL }}" \
            --build-arg APP_SECRET="${{ vars.APP_SECRET }}" \
            --build-arg APP_ENVIRONMENT="${{ vars.APP_ENVIRONMENT }}" \
            --build-arg APP_EMAIL_SENDER="${{ vars.APP_EMAIL_SENDER }}" \
            --build-arg APP_EMAIL_PASSWORD="${{ vars.APP_EMAIL_PASSWORD }}" \
            --build-arg SPRING_APPLICATION_NAME="${{ vars.SPRING_APPLICATION_NAME }}" \
            --build-arg SPRING_APPLICATION_NAME="${{ vars.CONNECTION_POOL_SIZE }}" \
            --build-arg SPRING_DATASOURCE_URL="${{ vars.SPRING_DATASOURCE_URL }}" \
            --build-arg SPRING_DATASOURCE_USERNAME="${{ vars.SPRING_DATASOURCE_USERNAME }}" \
            --build-arg SPRING_DATASOURCE_PASSWORD="${{ vars.SPRING_DATASOURCE_PASSWORD }}" \
            --build-arg SPRING_JPA_SHOW_SQL="${{ vars.SPRING_JPA_SHOW_SQL }}" \
            -t "${{ vars.DOCKER_APPLICATION_NAME }}:${{ github.sha }}" .

      - name: Push Docker image
        run: |
          docker push "${{ vars.DOCKER_APPLICATION_NAME }}:${{ github.sha }}"

  deploy:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: Authenticate Docker to Google Cloud
        run: |
          gcloud auth configure-docker

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ vars.DOCKER_PASSWORD }}

      - name: Pull Docker image
        run: docker pull "${{ vars.DOCKER_APPLICATION_NAME }}:${{ github.sha }}"

      - name: Tag Docker image
        run: |
          docker tag "${{ vars.DOCKER_APPLICATION_NAME }}:${{ github.sha }}" \
            "gcr.io/${{ vars.GCP_PROJECT_ID }}/${{ vars.DOCKER_APPLICATION_NAME }}:${{ github.sha }}"

      - name: Push Docker image to GCP
        run: docker push "gcr.io/${{ vars.GCP_PROJECT_ID }}/${{ vars.DOCKER_APPLICATION_NAME }}:${{ github.sha }}"

      - name: Deploy to GCP Cloud Run
        run: |
          gcloud run deploy "walletwise-api-staging" \
            --image=gcr.io/${{ vars.GCP_PROJECT_ID }}/${{ vars.DOCKER_APPLICATION_NAME }}:${{ github.sha }} \
            --platform=managed --region=southamerica-east1 --allow-unauthenticated --revision-suffix=${{ github.sha }}

      - name: Remove Docker images
        run: |
          docker rmi "${{ vars.DOCKER_APPLICATION_NAME }}:${{ github.sha }}" \
            "gcr.io/${{ vars.GCP_PROJECT_ID }}/${{ vars.DOCKER_APPLICATION_NAME }}:${{ github.sha }}"